{
cv.sample = sample(1:nrow(design), cv.size, replace=F)
cv = create.cv.distribution(design, Y, cv.sample)
if(cv$deviance > maxerr)
{
cat("possible poor fit of data! check out index ", i)
print(cv)
}
cv.set = rbind(cv.set, cv$par)
}
return(cv.set[-1,])
}
CV = create.cv.set()
CV
hist(CV[,1])
hist(CV[,1], bins=5)
hist(CV[,1], breaks=20)
hist(CV[,1], breaks=20)
hist(CV[,1], breaks=20)
hist(CV[,2], breaks=20)
hist(CV[,3], breaks=20)
hist(CV[,4], breaks=20)
hist(CV[,5], breaks=20)
hist(CV[,6], breaks=20)
hist(CV[,7], breaks=20)
create.cv.set = function(cv.distrib.size = 100, maxerr = .001)
{ #uses design, solve.bfgs
cv.size = ceiling(nrow(design)*.4)
cv.set = t(matrix(solve.bfgs$par)) #you must run the whole thing before doing CV.
for(i in 1:cv.distrib.size)
{
cv.sample = sample(1:nrow(design), cv.size, replace=F)
cv = create.cv.distribution(design, Y, cv.sample)
if(cv$deviance > maxerr)
{
cat("possible poor fit of data! check out index ", i)
print(cv)
}
cv.set = rbind(cv.set, cv$par)
}
return(cv.set[-1,])
}
CV = create.cv.set()
CV
CV = create.cv.set(maxerr=.000001)
cat("possible poor fit of data! check out index ", i, "\n")
i = 1
cat("possible poor fit of data! check out index ", i, "\n")
t(matrix(solve.bfgs$par))
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan * 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
##################################################
# Optimization methods to get delta values.
##################################################
solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
t(matrix(solve.bfgs$par))
n_v*(n_v-1)
matrix(0, 1, n_v*(n_v-1))
source('~/.active-rstudio-document')
CV
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan * 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
##################################################
# Optimization methods to get delta values.
##################################################
solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
#solve.nelder.mead <- nelder.mead()
#solve.sim.anneal <- sim.anneal()
##################################################
# Perform cross validations for significance testing
##################################################
CV = create.cv.distribution(design)
View(CV)
hist(CV[,1],breaks=8)
for(i in 1:6){
hist(CV[,i],breaks=8)
}
for(i in 1:6){
hist(CV[,i],breaks=8,xlab=paste(i))
}
?rankz
?rank.z
?rz.transform
??rz.transform
library("cape", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rz.transform
head(CV)
summary(CV)
?pt
scv = summary(CV)
scv
class(scv)
scv[1]
scv[1,]
scv[1,2]
colMeans(CV)
scv
std <- apply(CV, 2, sd)
n <- nrow(CV)
xbar <- colMeans(CV)
t <- (xbar-solve.bfgs)/(std/sqrt(n))
xbar-solve.bfgs
xbar
solve.bfgs$par
xbar-solve.bfgs$par
(xbar-solve.bfgs$par)/(std/sqrt(n))
2*pt(-abs(t),df=n-1)
p.val =  apply(t, 2, get.p.val)
get.p.val = function(){2*pt(-abs(t),df=n-1)}
p.val =  apply(t, 2, get.p.val)
get.p.val = function(t){2*pt(-abs(t),df=n-1)}
p.val = apply(t, 2, get.p.val)
p = list()
for(i in ncol(t))
{
p[i] = 2*pt(-abs(t[i]),df=n-1)
}
p
p = matrix(NA,1,ncol(t))
ncol(t)
t <- (xbar-solve.bfgs$par)/(std/sqrt(n))
ncol(t)
t
length(t)
p = matrix(NA,1,length(t))
for(i in length(t))
{
p[i] = 2*pt(-abs(t[i]),df=n-1)
}
p
for(i in 1:length(t))
{
p[i] = 2*pt(-abs(t[i]),df=n-1)
}
p
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan * 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
##################################################
# Optimization methods to get delta values.
##################################################
solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
#solve.nelder.mead <- nelder.mead()
#solve.sim.anneal <- sim.anneal()
##################################################
# Perform cross validations for significance testing
##################################################
CV = create.cv.distribution(design)
get.p.values(solve.bfgs)
CV
p = get.p.values(solve.bfgs)
p
source('~/JAX/simulation/epistasis-simulation/bin/lab/helper_fn.R')
p
p = get.p.values(solve.bfgs)
p
p = get.p.values(solve.lev.marq)
p
solve.bfgs
solve.bfgs <- bfgs(solve.bfgs$par)
solve.bfgs
p = get.p.values(solve.lev.marq)
p
get.p.values(solve.bfgs)
solve.bfgs <- bfgs()
solve.bfgs
p = get.p.values(solve.lev.marq)
[]
p
p = get.p.values(solve.bfgs)
p
pretty.deltas(solve.betas)
pretty.deltas(solve.bfgs)
pretty.deltas(solve.lev.marq)
solve.lev.marq
solve.bfgs = bfgs(solve.lev.marq$par)
solve.bfgs
solve.lev.marq
solve.lev.marq = lev.marq(solve.lev.marq$par)
solve.lev.marq
source('~/JAX/simulation/epistasis-simulation/bin/lab/helper_fn.R')
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan * 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
solve.betas.all <- solve.betas
##################################################
# Optimization methods to get delta values.
##################################################
solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
#solve.nelder.mead <- nelder.mead()
#solve.sim.anneal <- sim.anneal()
##################################################
# Perform cross validations for significance testing
##################################################
CV = create.cv.distribution(design)
#obtain p values of a given solution
p = get.p.values(solve.lev.marq)
p
solve.bfgs
solve.lev.marq
solve.lev.marq = lev.marq(solve.lev.marq$par)
solve.lev.marq
solve.bfgs = bfgs(solve.bfgs$par)
solve.bfgs
get.p.values(solve.bfgs)
solve.bfgs
solve.bfgs$value
solve.lev.marq$deviance
?nls.lm
solve.lev.marq
str(solve.lev.marq)
CV = create.cv.distribution(design)
std <- apply(CV, 2, sd)
n <- nrow(CV)
xbar <- colMeans(CV)
t <- (xbar-rep(0,6))/(std/sqrt(n))
p = matrix(NA,1,length(t))
for(i in 1:length(t))
{
p[i] = 2*pt(-abs(t[i]),df=n-1)
}
p
xbar
solve.bfgs
solve.bfgs$par
xbar
source('~/JAX/simulation/epistasis-simulation/bin/lab/helper_fn.R')
CV = create.cv.distribution(design)
#obtain p values of a given solution
p = get.p.values(solve.lev.marq)
p
std <- apply(CV, 2, sd)
n <- nrow(CV)
xbar <- colMeans(CV)
xbar
solve.lev.marq$par
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan #* 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
solve.betas.all <- solve.betas
##################################################
# Optimization methods to get delta values.
##################################################
#solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
#solve.nelder.mead <- nelder.mead()
#solve.sim.anneal <- sim.anneal()
##################################################
# Perform cross validations for significance testing
##################################################
CV = create.cv.distribution(design)
#obtain p values of a given solution
p = get.p.values(solve.lev.marq)
p
source('~/JAX/simulation/epistasis-simulation/bin/lab/helper_fn.R')
p = get.p.values(solve.lev.marq$par)
p
CV = create.cv.distribution(design)
CV
c(0.0359383356 -0.183517219 -1.0669239 -0.945941407 -0.9095309 -0.7055580)
p = get.p.values(rep(0,n_v*(n_v-1)))
p
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan #* 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
solve.betas.all <- solve.betas
##################################################
# Optimization methods to get delta values.
##################################################
#solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
#solve.nelder.mead <- nelder.mead()
#solve.sim.anneal <- sim.anneal()
solve.lev.marq
solve.lev.marq = lev.marq(solve.lev.marq$par)
solve.lev.marq
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan * 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
solve.betas.all <- solve.betas
##################################################
# Optimization methods to get delta values.
##################################################
#solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
solve.lev.marq
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan #* 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
##################################################
# Linear regression to get beta values.
##################################################
solve.betas <- ginv(design) %*% Y
solve.betas.all <- solve.betas
##################################################
# Optimization methods to get delta values.
##################################################
#solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
solve.lev.marq
pretty.deltas(solve.lev.marq)
CV = create.cv.distribution(design, cv.distrib.size = 2000)
p = get.p.values(solve.lev.marq$par)
p = get.p.values(rep(0,n_v*(n_v-1)))
p
p = get.p.values(solve.lev.marq$par)
p
CV = create.cv.distribution(design, cv.distrib.size = 30)
p = get.p.values(solve.lev.marq$par)
p = get.p.values(rep(0,n_v*(n_v-1)))
p
reshape.with.diag(p)
reshape.with.diag(p,3)
hist(CV[,1])
hist(CV[,1], breaks=10)
hist(CV[,1], breaks=100)
CV = create.cv.distribution(design, cv.distrib.size = 300)
hist(CV[,1], breaks=1)
hist(CV[,1], breaks=10)
hist(CV[,1], breaks=8)
hist(CV[,1], breaks=100)
hist(CV[,2], breaks=100)
for (i in 1:6){}
for (i in 1:6){
hist(CV[,i],breaks=100)
}
?scale
scale(0)
scale(CV[,1])
hist(scale(CV[,1]))
hist(scale(CV[,1]), breaks=100)
scale(CV[,1]) - CV[,1]
sCV = scale(CV[,1])
head(sCV)
head(CV)
setwd("~/JAX/simulation/epistasis-simulation/bin/lab")
library("MASS")
source("helper_fn.R")
##################################################
# Load data and produce design and response matrix
##################################################
load("steam_data.RData")
X = little.cross$geno.for.pairscan #* 2
Y = little.cross$ET
### Choose markers to analyze, and filter out all NA values.
#c(32,33,50,51,52)
data = data.for.markers(c(32,50,51), X, Y)
X = data$X
Y = data$Y
n_v = ncol(X)
### Create interaction terms from vanilla genotype matrix
design = get.interaction.terms(X, n_v)
solve.betas <- ginv(design) %*% Y
solve.betas.all <- solve.betas
##################################################
# Optimization methods to get delta values.
##################################################
#solve.bfgs <- bfgs()
solve.lev.marq <- lev.marq()
solve.lev.marq
CV = create.cv.distribution(design, cv.distrib.size = 300)
CV = create.cv.distribution(design, maxerr = .005, cv.distrib.size = 300)
p = get.p.values(solve.lev.marq$par)
p
p = get.p.values(rep(0,n_v*(n_v-1)))
p
